// <auto-generated />
using System;
using ConnectionProvider.Domain.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConnectionProvider.Domain.Migrations
{
    [DbContext(typeof(ConnectionProviderDbContext))]
    partial class ConnectionProviderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConnectionProvider.Domain.Entities.ConversionRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AED")
                        .HasColumnType("double precision");

                    b.Property<double?>("ARS")
                        .HasColumnType("double precision");

                    b.Property<double?>("AUD")
                        .HasColumnType("double precision");

                    b.Property<double?>("BGN")
                        .HasColumnType("double precision");

                    b.Property<double?>("BRL")
                        .HasColumnType("double precision");

                    b.Property<double?>("BSD")
                        .HasColumnType("double precision");

                    b.Property<double?>("CAD")
                        .HasColumnType("double precision");

                    b.Property<double?>("CHF")
                        .HasColumnType("double precision");

                    b.Property<double?>("CLP")
                        .HasColumnType("double precision");

                    b.Property<double?>("CNY")
                        .HasColumnType("double precision");

                    b.Property<double?>("COP")
                        .HasColumnType("double precision");

                    b.Property<double?>("CZK")
                        .HasColumnType("double precision");

                    b.Property<double?>("DKK")
                        .HasColumnType("double precision");

                    b.Property<double?>("DOP")
                        .HasColumnType("double precision");

                    b.Property<double?>("EGP")
                        .HasColumnType("double precision");

                    b.Property<double?>("EUR")
                        .HasColumnType("double precision");

                    b.Property<int>("ExchangeRateDataId")
                        .HasColumnType("integer");

                    b.Property<double?>("FJD")
                        .HasColumnType("double precision");

                    b.Property<double?>("GBP")
                        .HasColumnType("double precision");

                    b.Property<double?>("GTQ")
                        .HasColumnType("double precision");

                    b.Property<double?>("HKD")
                        .HasColumnType("double precision");

                    b.Property<double?>("HRK")
                        .HasColumnType("double precision");

                    b.Property<double?>("HUF")
                        .HasColumnType("double precision");

                    b.Property<double?>("IDR")
                        .HasColumnType("double precision");

                    b.Property<double?>("ILS")
                        .HasColumnType("double precision");

                    b.Property<double?>("INR")
                        .HasColumnType("double precision");

                    b.Property<double?>("ISK")
                        .HasColumnType("double precision");

                    b.Property<double?>("JPY")
                        .HasColumnType("double precision");

                    b.Property<double?>("KRW")
                        .HasColumnType("double precision");

                    b.Property<double?>("KZT")
                        .HasColumnType("double precision");

                    b.Property<double?>("MXN")
                        .HasColumnType("double precision");

                    b.Property<double?>("MYR")
                        .HasColumnType("double precision");

                    b.Property<double?>("NOK")
                        .HasColumnType("double precision");

                    b.Property<double?>("NZD")
                        .HasColumnType("double precision");

                    b.Property<double?>("PAB")
                        .HasColumnType("double precision");

                    b.Property<double?>("PEN")
                        .HasColumnType("double precision");

                    b.Property<double?>("PHP")
                        .HasColumnType("double precision");

                    b.Property<double?>("PKR")
                        .HasColumnType("double precision");

                    b.Property<double?>("PLN")
                        .HasColumnType("double precision");

                    b.Property<double?>("PYG")
                        .HasColumnType("double precision");

                    b.Property<double?>("RON")
                        .HasColumnType("double precision");

                    b.Property<double?>("RUB")
                        .HasColumnType("double precision");

                    b.Property<double?>("SAR")
                        .HasColumnType("double precision");

                    b.Property<double?>("SEK")
                        .HasColumnType("double precision");

                    b.Property<double?>("SGD")
                        .HasColumnType("double precision");

                    b.Property<double?>("THB")
                        .HasColumnType("double precision");

                    b.Property<double?>("TRY")
                        .HasColumnType("double precision");

                    b.Property<double?>("TWD")
                        .HasColumnType("double precision");

                    b.Property<double?>("UAH")
                        .HasColumnType("double precision");

                    b.Property<double?>("USD")
                        .HasColumnType("double precision");

                    b.Property<double?>("UYU")
                        .HasColumnType("double precision");

                    b.Property<double?>("ZAR")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeRateDataId")
                        .IsUnique();

                    b.ToTable("ConversionRates", "public");
                });

            modelBuilder.Entity("ConnectionProvider.Domain.Entities.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("base_code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("documentation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("terms_of_use")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("time_last_update_unix")
                        .HasColumnType("bigint");

                    b.Property<string>("time_last_update_utc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("time_next_update_unix")
                        .HasColumnType("bigint");

                    b.Property<string>("time_next_update_utc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates", "public");
                });

            modelBuilder.Entity("ConnectionProvider.Domain.Entities.ConversionRate", b =>
                {
                    b.HasOne("ConnectionProvider.Domain.Entities.ExchangeRate", "ExchangeRateData")
                        .WithOne("ConversionRates")
                        .HasForeignKey("ConnectionProvider.Domain.Entities.ConversionRate", "ExchangeRateDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExchangeRateData");
                });

            modelBuilder.Entity("ConnectionProvider.Domain.Entities.ExchangeRate", b =>
                {
                    b.Navigation("ConversionRates")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
